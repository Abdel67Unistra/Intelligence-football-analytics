#!/usr/bin/env python3
"""
Tests d'int√©gration pour la Plateforme Football Analytics
"""

import sys
import os
import traceback
from pathlib import Path

# Ajouter le r√©pertoire racine au path
sys.path.insert(0, str(Path(__file__).parent))

def test_imports():
    """Test des imports principaux"""
    print("üß™ Test des imports...")
    
    try:
        import pandas as pd
        import numpy as np
        import streamlit as st
        print("‚úÖ Imports de base OK")
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False
    
    try:
        from python_analytics.modules.performance_analyzer import PlayerPerformanceAnalyzer
        from python_analytics.modules.tactical_analyzer import TacticalAnalyzer
        from python_analytics.modules.scouting_engine import ScoutingEngine
        print("‚úÖ Modules analytics OK")
    except ImportError as e:
        print(f"‚ùå Erreur modules analytics: {e}")
        return False
    
    return True

def test_database_config():
    """Test de la configuration base de donn√©es"""
    print("üóÑÔ∏è  Test configuration base de donn√©es...")
    
    try:
        from configs.database import DatabaseConfig
        config = DatabaseConfig()
        print("‚úÖ Configuration DB OK")
        return True
    except Exception as e:
        print(f"‚ùå Erreur configuration DB: {e}")
        return False

def test_football_metrics():
    """Test des m√©triques football"""
    print("‚öΩ Test des m√©triques football...")
    
    try:
        from python_analytics.modules.performance_analyzer import FootballMetrics
        
        # Test calcul xG
        metrics = FootballMetrics()
        xg = metrics.calculate_xg(
            distance=15,
            angle=30,
            shot_type='foot',
            assist_type='pass'
        )
        
        assert 0 <= xg <= 1, "xG doit √™tre entre 0 et 1"
        print(f"‚úÖ Calcul xG OK (xG = {xg:.3f})")
        
        # Test calcul xA
        xa = metrics.calculate_xa(
            pass_distance=25,
            pass_angle=45,
            receiver_position='penalty_area'
        )
        
        assert 0 <= xa <= 1, "xA doit √™tre entre 0 et 1"
        print(f"‚úÖ Calcul xA OK (xA = {xa:.3f})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur m√©triques: {e}")
        traceback.print_exc()
        return False

def test_data_generation():
    """Test de la g√©n√©ration de donn√©es d√©mo"""
    print("üìä Test g√©n√©ration donn√©es d√©mo...")
    
    try:
        from database.migrations.populate_demo_data import FootballDataGenerator
        
        generator = FootballDataGenerator()
        
        # Test g√©n√©ration joueur
        player = generator.generate_player_stats()
        assert 'name' in player
        assert 'position' in player
        assert 'goals' in player
        print("‚úÖ G√©n√©ration joueur OK")
        
        # Test g√©n√©ration match
        match = generator.generate_match_data()
        assert 'home_team' in match
        assert 'away_team' in match
        assert 'events' in match
        print("‚úÖ G√©n√©ration match OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration donn√©es: {e}")
        traceback.print_exc()
        return False

def run_all_tests():
    """Ex√©cute tous les tests"""
    print("üöÄ Lancement des tests de la Plateforme Football Analytics")
    print("=" * 60)
    
    tests = [
        test_imports,
        test_database_config,
        test_football_metrics,
        test_data_generation
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå Erreur inattendue dans {test.__name__}: {e}")
            failed += 1
        print()
    
    print("üìä R√©sultats des tests:")
    print(f"‚úÖ Tests r√©ussis: {passed}")
    print(f"‚ùå Tests √©chou√©s: {failed}")
    
    if failed == 0:
        print("üéâ Tous les tests sont pass√©s! La plateforme est pr√™te.")
        return True
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)
