#!/usr/bin/env python3
"""
Script de d√©monstration rapide de la Plateforme Football Analytics
================================================================

Ce script g√©n√®re des donn√©es de d√©monstration et lance les principales fonctionnalit√©s
sans n√©cessiter une base de donn√©es PostgreSQL compl√®te.
"""

import pandas as pd
import numpy as np
import sys
from pathlib import Path

# Ajouter le r√©pertoire racine au path
sys.path.insert(0, str(Path(__file__).parent))

def generate_demo_data():
    """G√©n√®re des donn√©es de d√©monstration r√©alistes"""
    print("üìä G√©n√©ration des donn√©es de d√©monstration...")
    
    # Donn√©es joueurs
    players_data = {
        'player_id': range(1, 23),
        'name': [
            'Kylian Mbapp√©', 'Erling Haaland', 'Vinicius Jr', 'Pedri', 'Jude Bellingham',
            'Bukayo Saka', 'Phil Foden', 'Jamal Musiala', 'Luka Modriƒá', 'Kevin De Bruyne',
            'Robert Lewandowski', 'Harry Kane', 'Victor Osimhen', 'Rafael Le√£o', 'Khvicha Kvaratskhelia',
            'Gavi', 'Aurelien Tchouameni', 'Enzo Fern√°ndez', 'Martin √òdegaard', 'Bruno Fernandes',
            'Virgil van Dijk', 'Ruben Dias'
        ],
        'position': [
            'RW', 'ST', 'LW', 'CM', 'CM', 'RW', 'CAM', 'CAM', 'CM', 'CAM',
            'ST', 'ST', 'ST', 'LW', 'LW', 'CM', 'CDM', 'CM', 'CAM', 'CAM',
            'CB', 'CB'
        ],
        'age': np.random.randint(19, 35, 22),
        'market_value': np.random.uniform(20, 180, 22),  # en millions ‚Ç¨
        'goals': np.random.poisson(12, 22),
        'assists': np.random.poisson(8, 22),
        'minutes_played': np.random.randint(1500, 3000, 22),
        'xg': np.random.uniform(0.3, 1.2, 22),
        'xa': np.random.uniform(0.2, 0.9, 22)
    }
    
    players_df = pd.DataFrame(players_data)
    
    # Donn√©es de tirs pour xG
    shots_data = {
        'player_id': np.random.choice(range(1, 23), 100),
        'x': np.random.uniform(10, 22, 100),  # Position X sur le terrain
        'y': np.random.uniform(-10, 10, 100),  # Position Y sur le terrain
        'situation': np.random.choice(['open_play', 'corner', 'free_kick', 'penalty'], 100),
        'body_part': np.random.choice(['foot', 'head'], 100),
        'distance': np.random.uniform(5, 35, 100),
        'angle': np.random.uniform(0, 90, 100),
        'goal': np.random.choice([0, 1], 100, p=[0.8, 0.2])
    }
    
    shots_df = pd.DataFrame(shots_data)
    
    print("‚úÖ Donn√©es g√©n√©r√©es avec succ√®s")
    return players_df, shots_df

def demo_football_metrics():
    """D√©monstration des m√©triques football"""
    print("\n‚öΩ === D√âMONSTRATION M√âTRIQUES FOOTBALL ===")
    
    try:
        from python_analytics.modules.performance_analyzer import FootballMetrics
        
        players_df, shots_df = generate_demo_data()
        metrics = FootballMetrics()
        
        # Calcul xG
        print("üìà Calcul des Expected Goals (xG)...")
        shots_with_xg = metrics.calculate_xg(shots_df)
        avg_xg = shots_with_xg['xg'].mean()
        print(f"   xG moyen par tir: {avg_xg:.3f}")
        print(f"   Total xG: {shots_with_xg['xg'].sum():.1f}")
        print(f"   Buts r√©els: {shots_df['goal'].sum()}")
        
        # Top tireurs
        top_shooters = shots_with_xg.groupby('player_id').agg({
            'xg': 'sum',
            'goal': 'sum'
        }).sort_values('xg', ascending=False).head(5)
        
        print("\nüéØ Top 5 tireurs (xG):")
        for idx, (player_id, row) in enumerate(top_shooters.iterrows(), 1):
            print(f"   {idx}. Joueur {player_id}: {row['xg']:.2f} xG, {row['goal']} buts")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def demo_player_analysis():
    """D√©monstration de l'analyse joueur"""
    print("\nüë§ === ANALYSE DE PERFORMANCE JOUEUR ===")
    
    try:
        from python_analytics.modules.performance_analyzer import PlayerPerformanceAnalyzer
        
        players_df, _ = generate_demo_data()
        analyzer = PlayerPerformanceAnalyzer()
        
        # Analyse du top joueur
        top_player = players_df.loc[players_df['market_value'].idxmax()]
        print(f"üåü Analyse de {top_player['name']} ({top_player['position']}):")
        print(f"   √Çge: {top_player['age']} ans")
        print(f"   Valeur marchande: {top_player['market_value']:.1f}M‚Ç¨")
        print(f"   Buts: {top_player['goals']} | Passes: {top_player['assists']}")
        print(f"   Minutes: {top_player['minutes_played']}")
        
        # Calcul de forme
        form_data = pd.DataFrame({
            'match_date': pd.date_range('2024-08-01', periods=10, freq='W'),
            'goals': np.random.poisson(0.5, 10),
            'assists': np.random.poisson(0.3, 10),
            'rating': np.random.uniform(6.0, 9.0, 10)
        })
        
        current_form = analyzer.calculate_player_form(top_player['player_id'], form_data)
        print(f"   Forme actuelle: {current_form:.2f}/10")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def demo_scouting_engine():
    """D√©monstration du moteur de scouting"""
    print("\nüîç === MOTEUR DE SCOUTING IA ===")
    
    try:
        from python_analytics.modules.scouting_engine import ScoutingEngine
        
        players_df, _ = generate_demo_data()
        scout = ScoutingEngine()
        
        # Recherche de joueurs similaires
        target_player_id = 1  # Mbapp√©
        similar_players = scout.find_similar_players(
            target_player_id, 
            players_df,
            position_filter='RW'
        )
        
        print("üéØ Joueurs similaires √† Kylian Mbapp√©:")
        for i, (player_id, similarity) in enumerate(similar_players.head(3).items(), 1):
            player_name = players_df[players_df['player_id'] == player_id]['name'].iloc[0]
            print(f"   {i}. {player_name} (similarit√©: {similarity:.3f})")
        
        # Pr√©diction valeur marchande
        predicted_value = scout.predict_market_value(players_df.iloc[0])
        actual_value = players_df.iloc[0]['market_value']
        print(f"\nüí∞ Pr√©diction valeur marchande:")
        print(f"   Valeur r√©elle: {actual_value:.1f}M‚Ç¨")
        print(f"   Valeur pr√©dite: {predicted_value:.1f}M‚Ç¨")
        print(f"   √âcart: {abs(predicted_value - actual_value):.1f}M‚Ç¨")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def main():
    """Fonction principale de d√©monstration"""
    print("üöÄ D√âMONSTRATION PLATEFORME FOOTBALL ANALYTICS")
    print("=" * 60)
    print("Cette d√©monstration pr√©sente les capacit√©s principales de la plateforme")
    print("sans n√©cessiter de base de donn√©es PostgreSQL compl√®te.\n")
    
    demos = [
        demo_football_metrics,
        demo_player_analysis,
        demo_scouting_engine
    ]
    
    success_count = 0
    
    for demo in demos:
        try:
            if demo():
                success_count += 1
            else:
                print("‚ùå D√©monstration √©chou√©e")
        except Exception as e:
            print(f"‚ùå Erreur inattendue: {e}")
        
        print()
    
    print("=" * 60)
    print(f"‚úÖ {success_count}/{len(demos)} d√©monstrations r√©ussies")
    
    if success_count == len(demos):
        print("\nüéâ La plateforme fonctionne parfaitement!")
        print("\nüìã Prochaines √©tapes:")
        print("1. Configurez PostgreSQL pour des donn√©es compl√®tes")
        print("2. Lancez le dashboard: streamlit run python_analytics/dashboards/coach_interface.py")
        print("3. Explorez les notebooks Jupyter dans /notebooks/")
        print("4. Consultez la documentation compl√®te dans README.md")
    else:
        print("\n‚ö†Ô∏è  Certaines fonctionnalit√©s ont des probl√®mes.")
        print("V√©rifiez les d√©pendances et la configuration.")

if __name__ == "__main__":
    main()
