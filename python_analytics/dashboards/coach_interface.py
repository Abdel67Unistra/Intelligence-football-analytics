"""
Racing Club de Strasbourg - Analytics Temps R√©el
===============================================

Plateforme d'analyse exclusive RCS avec donn√©es r√©elles et formules statistiques avanc√©es.
R√©cup√©ration automatique des actualit√©s, stats et analyses en temps r√©el.

Auteur: Football Analytics Platform  
√âquipe: Racing Club de Strasbourg - Donn√©es R√©elles
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import sys
import os
import requests
import warnings
warnings.filterwarnings('ignore')

# Import du module de collecte de donn√©es RCS
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'modules'))

# Configuration de la page Streamlit
st.set_page_config(
    page_title="üîµ‚ö™ Racing Club de Strasbourg - Analytics Temps R√©el",
    page_icon="üîµ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Initialisation du collecteur de donn√©es RCS
@st.cache_resource
def initialiser_collecteur():
    """Initialise le collecteur de donn√©es RCS"""
    try:
        from collecteur_donnees_rcs import CollecteurDonneesRCS, AnalyseurStatistiquesRCS
        collecteur = CollecteurDonneesRCS()
        analyseur = AnalyseurStatistiquesRCS(collecteur)
        return collecteur, analyseur
    except ImportError:
        st.error("‚ö†Ô∏è Module de collecte non disponible - Mode d√©grad√© activ√©")
        return None, None

# CSS personnalis√© RCS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #0066CC;
        text-align: center;
        background: linear-gradient(90deg, #0066CC, #FFFFFF, #0066CC);
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 2rem;
    }
    .metric-rcs {
        background: linear-gradient(135deg, #0066CC 0%, #004499 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin: 0.5rem 0;
    }
    .rcs-card {
        background: linear-gradient(90deg, #0066CC, #FFFFFF);
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #0066CC;
        margin: 1rem 0;
    }
    .success-card {
        background: #51cf66;
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 0.5rem 0;
    }
    .stSelectbox > div > div {
        background-color: #f0f8ff;
    }
    h1, h2, h3 {
        color: #0066CC;
    }
</style>
""", unsafe_allow_html=True)

# Fonction de g√©n√©ration de donn√©es simul√©es pour Streamlit Cloud
@st.cache_data
def generate_demo_data():
    """G√©n√®re des donn√©es de d√©monstration pour le dashboard"""
    return {
        'status': 'demo_mode',
        'message': 'Utilisation de donn√©es simul√©es pour la d√©monstration Streamlit Cloud'
    }

# Fonction de chargement des donn√©es √©quipes
@st.cache_data
def load_teams():
    """Charge la liste des √©quipes"""
    # Donn√©es de d√©monstration
    return pd.DataFrame({
        'team_id': ['team_1', 'team_2', 'team_3'],
        'name': ['Paris Saint-Germain', 'Olympique de Marseille', 'AS Monaco'],
        'league': ['Ligue 1', 'Ligue 1', 'Ligue 1']
    })

# Fonction de chargement des joueurs
@st.cache_data  
def load_players(team_id=None):
    """Charge la liste des joueurs"""
    # Donn√©es de d√©monstration
    players_data = {
        'team_1': [
            {'player_id': 'p1', 'name': 'Kylian Mbapp√©', 'position': 'ST'},
            {'player_id': 'p2', 'name': 'Marco Verratti', 'position': 'CM'},
            {'player_id': 'p3', 'name': 'Marquinhos', 'position': 'CB'}
        ],
        'team_2': [
            {'player_id': 'p4', 'name': 'Dimitri Payet', 'position': 'AM'},
            {'player_id': 'p5', 'name': 'Matt√©o Guendouzi', 'position': 'CM'},
            {'player_id': 'p6', 'name': 'William Saliba', 'position': 'CB'}
        ]
    }
    
    if team_id and team_id in players_data:
        return pd.DataFrame(players_data[team_id])
    
    # Retourner tous les joueurs si pas d'√©quipe sp√©cifi√©e
    all_players = []
    for team_players in players_data.values():
        all_players.extend(team_players)
    
    return pd.DataFrame(all_players)

# Donn√©es effectif r√©el Racing Club de Strasbourg 2024-2025
def obtenir_effectif_rcs():
    """Retourne l'effectif actuel du RCS avec donn√©es r√©elles"""
    effectif_data = [
        # Gardiens
        {"nom": "Matz Sels", "age": 32, "poste": "GB", "valeur_marche": 4.0, "titulaire": True, "nationalite": "Belgique"},
        {"nom": "Alaa Bellaarouch", "age": 20, "poste": "GB", "valeur_marche": 0.5, "titulaire": False, "nationalite": "France"},
        
        # D√©fenseurs
        {"nom": "Guela Dou√©", "age": 22, "poste": "DD", "valeur_marche": 8.0, "titulaire": True, "nationalite": "C√¥te d'Ivoire"},
        {"nom": "Abakar Sylla", "age": 25, "poste": "DC", "valeur_marche": 3.5, "titulaire": True, "nationalite": "France"},
        {"nom": "Sa√Ødou Sow", "age": 22, "poste": "DC", "valeur_marche": 4.0, "titulaire": True, "nationalite": "Guin√©e"},
        {"nom": "Mamadou Sarr", "age": 26, "poste": "DG", "valeur_marche": 3.0, "titulaire": True, "nationalite": "S√©n√©gal"},
        {"nom": "Marvin Senaya", "age": 22, "poste": "DD", "valeur_marche": 2.5, "titulaire": False, "nationalite": "France"},
        {"nom": "Isma√´l Doukour√©", "age": 23, "poste": "DC", "valeur_marche": 2.0, "titulaire": False, "nationalite": "France"},
        
        # Milieux
        {"nom": "Habib Diarra", "age": 20, "poste": "MC", "valeur_marche": 12.0, "titulaire": True, "nationalite": "S√©n√©gal"},
        {"nom": "Andrey Santos", "age": 20, "poste": "MDC", "valeur_marche": 8.0, "titulaire": True, "nationalite": "Br√©sil"},
        {"nom": "Dilane Bakwa", "age": 21, "poste": "AD", "valeur_marche": 10.0, "titulaire": True, "nationalite": "France"},
        {"nom": "Sebastian Nanasi", "age": 22, "poste": "AG", "valeur_marche": 6.0, "titulaire": True, "nationalite": "Su√®de"},
        {"nom": "Caleb Wiley", "age": 19, "poste": "DG", "valeur_marche": 4.0, "titulaire": False, "nationalite": "USA"},
        {"nom": "Pape Diong", "age": 20, "poste": "MC", "valeur_marche": 1.5, "titulaire": False, "nationalite": "S√©n√©gal"},
        
        # Attaquants
        {"nom": "Emanuel Emegha", "age": 21, "poste": "BU", "valeur_marche": 8.0, "titulaire": True, "nationalite": "Pays-Bas"},
        {"nom": "F√©lix Lemar√©chal", "age": 19, "poste": "MOC", "valeur_marche": 4.0, "titulaire": False, "nationalite": "France"},
        {"nom": "Abdoul Ouattara", "age": 18, "poste": "AD", "valeur_marche": 2.0, "titulaire": False, "nationalite": "France"},
        {"nom": "Mo√Øse Sahi", "age": 18, "poste": "BU", "valeur_marche": 1.0, "titulaire": False, "nationalite": "France"},
        {"nom": "Jeremy Sebas", "age": 19, "poste": "BU", "valeur_marche": 0.8, "titulaire": False, "nationalite": "France"}
    ]
    
    return pd.DataFrame(effectif_data)

def calculer_xg_rcs(distance, situation, joueur):
    """Calcule l'xG adapt√© au style RCS"""
    # xG de base selon distance
    xg_base = max(0.05, 1.0 - (distance / 40))
    
    # Bonus situation (style contre-attaque RCS)
    if situation == "contre_attaque":
        xg_base *= 1.35
    elif situation == "corner":
        xg_base *= 0.9
    elif situation == "coup_franc":
        xg_base *= 0.8
    
    # Bonus finisseurs RCS
    bonus_finisseurs = {
        "Emanuel Emegha": 1.15,
        "Dilane Bakwa": 1.10,
        "Habib Diarra": 1.08,
        "Sebastian Nanasi": 1.05
    }
    
    if joueur in bonus_finisseurs:
        xg_base *= bonus_finisseurs[joueur]
    
    return min(0.95, xg_base)

def obtenir_composition_ideale_rcs():
    """Composition id√©ale 4-2-3-1 RCS"""
    return {
        "formation": "4-2-3-1",
        "gardien": "Matz Sels",
        "defenseurs": ["Guela Dou√©", "Abakar Sylla", "Sa√Ødou Sow", "Mamadou Sarr"],
        "milieux_defensifs": ["Andrey Santos", "Habib Diarra"],
        "milieux_offensifs": ["Dilane Bakwa", "Sebastian Nanasi", "Caleb Wiley"],
        "attaquant": "Emanuel Emegha"
    }

# Fonction principale du dashboard
def main():
    """Interface principale du dashboard"""
    
    # Header principal
    st.markdown('<h1 class="main-header">‚öΩ Football Analytics Dashboard</h1>', 
                unsafe_allow_html=True)
    
    # Sidebar pour navigation
    st.sidebar.title("üéØ Navigation")
    page = st.sidebar.selectbox(
        "Choisir une vue",
        ["üè† Vue d'ensemble", "üë§ Analyse Joueur", "‚öΩ Analyse √âquipe", 
         "üìà Performance Temps R√©el", "üîç Scouting & Recrutement", "üìä Rapports"]
    )
    
    # Initialisation des donn√©es de d√©monstration
    demo_data = generate_demo_data()
    
    # Message d'information pour Streamlit Cloud
    st.info("üéÆ Mode D√©monstration Streamlit Cloud - Donn√©es simul√©es pour pr√©sentation")
    
    # Navigation entre les pages
    if page == "üè† Vue d'ensemble":
        show_overview()
    elif page == "üë§ Analyse Joueur":
        show_player_analysis()
    elif page == "‚öΩ Analyse √âquipe":
        show_team_analysis()
    elif page == "üìà Performance Temps R√©el":
        show_realtime_performance()
    elif page == "üîç Scouting & Recrutement":
        show_scouting_analysis()
    elif page == "üìä Rapports":
        show_reports()

def show_overview():
    """Affiche la vue d'ensemble du dashboard"""
    
    st.header("üìä Vue d'ensemble - Tableau de Bord")
    
    # M√©triques cl√©s en colonnes
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <h3>Matchs Jou√©s</h3>
            <h2>15/20</h2>
            <p>Saison 2024-25</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <h3>Points</h3>
            <h2>32</h2>
            <p>7√®me position</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
            <h3>xG Pour/Contre</h3>
            <h2>24.5 / 18.2</h2>
            <p>+6.3 diff√©rentiel</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown("""
        <div class="metric-card">
            <h3>PPDA Moyen</h3>
            <h2>11.4</h2>
            <p>Pressing intense</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Graphiques de performance
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà √âvolution des Points")
        
        # Donn√©es simul√©es de performance
        dates = pd.date_range('2024-08-01', periods=15, freq='W')
        points_cumules = np.cumsum(np.random.choice([0, 1, 3], 15, p=[0.2, 0.3, 0.5]))
        
        fig = px.line(x=dates, y=points_cumules, 
                     title="Points cumul√©s par journ√©e")
        fig.update_layout(xaxis_title="Date", yaxis_title="Points")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("‚öΩ Performance xG")
        
        # Donn√©es xG simul√©es
        matches = [f"J{i}" for i in range(1, 16)]
        xg_for = np.random.uniform(0.5, 3.5, 15)
        xg_against = np.random.uniform(0.3, 2.8, 15)
        
        fig = go.Figure()
        fig.add_trace(go.Bar(name='xG Pour', x=matches, y=xg_for, marker_color='lightblue'))
        fig.add_trace(go.Bar(name='xG Contre', x=matches, y=-xg_against, marker_color='lightcoral'))
        fig.update_layout(title="Expected Goals par match", barmode='relative')
        st.plotly_chart(fig, use_container_width=True)
    
    # Alertes et notifications
    st.header("üö® Alertes & Notifications")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="warning-card">
            <h4>‚ö†Ô∏è Risque de Blessure</h4>
            <p><strong>Kylian Mbapp√©</strong></p>
            <p>Charge d'entra√Ænement √©lev√©e (95%)</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="success-card">
            <h4>‚úÖ Forme Excellente</h4>
            <p><strong>Marco Verratti</strong></p>
            <p>Note moyenne : 8.2/10 (5 derniers matchs)</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="warning-card">
            <h4>üìâ Baisse de Forme</h4>
            <p><strong>D√©fense Centrale</strong></p>
            <p>xGA en hausse : +0.4 par match</p>
        </div>
        """, unsafe_allow_html=True)

def show_player_analysis():
    """Interface d'analyse des joueurs"""
    
    st.header("üë§ Analyse Individuelle des Joueurs")
    
    # S√©lection d'√©quipe et joueur
    col1, col2 = st.columns(2)
    
    with col1:
        teams = load_teams()
        selected_team = st.selectbox(
            "Choisir une √©quipe",
            teams['team_id'].tolist(),
            format_func=lambda x: teams[teams['team_id'] == x]['name'].iloc[0]
        )
    
    with col2:
        players = load_players(selected_team)
        selected_player = st.selectbox(
            "Choisir un joueur",
            players['player_id'].tolist(),
            format_func=lambda x: players[players['player_id'] == x]['name'].iloc[0]
        )
    
    # Analyse de forme du joueur s√©lectionn√©
    if selected_player:
        player_name = players[players['player_id'] == selected_player]['name'].iloc[0]
        st.subheader(f"üìä Analyse de {player_name}")
        
        # M√©triques de performance (donn√©es simul√©es)
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("Note Moyenne", "7.8", "‚ÜóÔ∏è +0.3")
        with col2:
            st.metric("Goals/90min", "0.72", "‚ÜòÔ∏è -0.1")
        with col3:
            st.metric("xG/90min", "0.68", "‚ÜóÔ∏è +0.05")
        with col4:
            st.metric("Pr√©cision Passes", "89.2%", "‚ÜóÔ∏è +1.5%")
        
        # Graphique radar des comp√©tences
        st.subheader("üéØ Profil de Comp√©tences - Graphique Radar")
        
        categories = ['Finition', 'Passes', 'D√©fense', 'Physique', 'Vitesse', 'Technique']
        values = np.random.randint(60, 95, len(categories))
        
        fig = go.Figure()
        fig.add_trace(go.Scatterpolar(
            r=values,
            theta=categories,
            fill='toself',
            name=player_name,
            line_color='blue'
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 100]
                )),
            showlegend=True,
            title="Profil de Comp√©tences"
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # √âvolution des performances
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìà √âvolution des Notes")
            dates = pd.date_range('2024-09-01', periods=10, freq='W')
            ratings = np.random.uniform(6.5, 9.0, 10)
            
            fig = px.line(x=dates, y=ratings, title="Notes des 10 derniers matchs")
            fig.add_hline(y=ratings.mean(), line_dash="dash", 
                         annotation_text=f"Moyenne: {ratings.mean():.1f}")
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.subheader("‚öΩ Statistiques Offensives")
            stats_data = pd.DataFrame({
                'Match': [f'J{i}' for i in range(1, 11)],
                'Goals': np.random.poisson(0.5, 10),
                'xG': np.random.uniform(0.1, 1.2, 10),
                'Assists': np.random.poisson(0.3, 10)
            })
            
            fig = make_subplots(specs=[[{"secondary_y": True}]])
            fig.add_trace(go.Bar(name='Goals', x=stats_data['Match'], y=stats_data['Goals']))
            fig.add_trace(go.Scatter(name='xG', x=stats_data['Match'], y=stats_data['xG'], 
                                   mode='lines+markers'), secondary_y=True)
            
            fig.update_xaxes(title_text="Matchs")
            fig.update_yaxes(title_text="Goals", secondary_y=False)
            fig.update_yaxes(title_text="Expected Goals", secondary_y=True)
            
            st.plotly_chart(fig, use_container_width=True)

def show_team_analysis():
    """Interface d'analyse d'√©quipe"""
    
    st.header("‚öΩ Analyse Tactique d'√âquipe")
    
    # S√©lection d'√©quipe
    teams = load_teams()
    selected_team = st.selectbox(
        "Analyser l'√©quipe",
        teams['team_id'].tolist(),
        format_func=lambda x: teams[teams['team_id'] == x]['name'].iloc[0]
    )
    
    team_name = teams[teams['team_id'] == selected_team]['name'].iloc[0]
    st.subheader(f"üìä Analyse de {team_name}")
    
    # M√©triques d'√©quipe
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Possession Moyenne", "58.3%", "‚ÜóÔ∏è +2.1%")
    with col2:
        st.metric("PPDA", "11.4", "‚ÜòÔ∏è -0.8")
    with col3:
        st.metric("Passes/Match", "542", "‚ÜóÔ∏è +15")
    with col4:
        st.metric("Pr√©cision Passes", "87.1%", "‚ÜóÔ∏è +1.2%")
    
    # Analyses tactiques
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üéØ Formation et Positions Moyennes")
        
        # Simulation du terrain avec positions
        fig = go.Figure()
        
        # Positions moyennes simul√©es (11 joueurs)
        positions_x = [10, 25, 25, 25, 25, 45, 45, 45, 70, 70, 85]
        positions_y = [50, 20, 35, 50, 65, 30, 50, 70, 35, 65, 50]
        names = ['GK', 'LB', 'CB', 'CB', 'RB', 'DM', 'CM', 'CM', 'LW', 'RW', 'ST']
        
        fig.add_trace(go.Scatter(
            x=positions_x, y=positions_y,
            mode='markers+text',
            text=names,
            textposition="middle center",
            marker=dict(size=30, color='lightblue', line=dict(width=2, color='blue')),
            name="Positions Moyennes"
        ))
        
        # Terrain de football
        fig.add_shape(type="rect", x0=0, y0=0, x1=100, y1=100, 
                     line=dict(color="green", width=3))
        fig.add_shape(type="line", x0=50, y0=0, x1=50, y1=100, 
                     line=dict(color="white", width=2))
        
        fig.update_layout(
            title="Formation 4-3-3 - Positions Moyennes",
            xaxis=dict(range=[0, 100], showgrid=False),
            yaxis=dict(range=[0, 100], showgrid=False),
            showlegend=False,
            height=400
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üîó R√©seau de Passes")
        
        # Matrice de connexions de passes (simulation)
        players_network = ['Verratti', 'Marquinhos', 'Mbapp√©', 'Neymar', 'Hakimi']
        pass_matrix = np.random.randint(10, 50, (5, 5))
        np.fill_diagonal(pass_matrix, 0)
        
        fig = px.imshow(pass_matrix, 
                       x=players_network, y=players_network,
                       color_continuous_scale='Blues',
                       title="Intensit√© des Connexions de Passes")
        fig.update_layout(height=400)
        
        st.plotly_chart(fig, use_container_width=True)
    
    # Analyse des phases de jeu
    st.subheader("‚ö° Analyse des Phases de Jeu")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <h4>üõ°Ô∏è Phase D√©fensive</h4>
            <p><strong>R√©cup√©rations/Match:</strong> 52.3</p>
            <p><strong>Pressing Success:</strong> 31.2%</p>
            <p><strong>Duels A√©riens:</strong> 58.7%</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <h4>üîÑ Transition</h4>
            <p><strong>Contre-attaques:</strong> 8.2/match</p>
            <p><strong>Vitesse Transition:</strong> 2.1s</p>
            <p><strong>Changements Jeu:</strong> 12.4</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
            <h4>‚öîÔ∏è Phase Offensive</h4>
            <p><strong>Tirs/Match:</strong> 14.7</p>
            <p><strong>Occasions Cr√©√©es:</strong> 11.3</p>
            <p><strong>Centres R√©ussis:</strong> 23.1%</p>
        </div>
        """, unsafe_allow_html=True)

def show_realtime_performance():
    """Interface de performance en temps r√©el"""
    
    st.header("üìà Performance Temps R√©el")
    
    st.info("üî¥ LIVE - Match en cours : PSG vs OM")
    
    # Score et temps
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("""
        <div style="text-align: center; font-size: 2rem; margin: 1rem 0;">
            <strong>PSG 2 - 1 OM</strong><br>
            <span style="font-size: 1rem; color: #666;">72' - Deuxi√®me Mi-temps</span>
        </div>
        """, unsafe_allow_html=True)
    
    # M√©triques live
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("xG", "PSG 1.8 - 1.2 OM", "‚ÜóÔ∏è")
    with col2:
        st.metric("Possession", "PSG 62% - 38% OM", "")
    with col3:
        st.metric("Tirs", "PSG 8 - 6 OM", "")
    with col4:
        st.metric("Passes", "PSG 421 - 264 OM", "")
    
    # √âvolution en temps r√©el
    st.subheader("üìä √âvolution du Match")
    
    # Simulation de donn√©es temps r√©el
    minutes = list(range(0, 73))
    psg_xg = np.cumsum(np.random.exponential(0.03, 73))
    om_xg = np.cumsum(np.random.exponential(0.02, 73))
    
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=minutes, y=psg_xg, name='PSG xG', line=dict(color='blue')))
    fig.add_trace(go.Scatter(x=minutes, y=om_xg, name='OM xG', line=dict(color='red')))
    
    # Ajout des buts
    goals_psg = [23, 54]  # Minutes des buts
    goals_om = [31]
    
    for goal_min in goals_psg:
        fig.add_vline(x=goal_min, line_dash="dash", line_color="blue", 
                     annotation_text=f"‚öΩ PSG {goal_min}'")
    
    for goal_min in goals_om:
        fig.add_vline(x=goal_min, line_dash="dash", line_color="red", 
                     annotation_text=f"‚öΩ OM {goal_min}'")
    
    fig.update_layout(title="√âvolution xG pendant le match", 
                     xaxis_title="Minutes", yaxis_title="Expected Goals")
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Heatmap des actions
    st.subheader("üî• Zones d'Action - Derni√®res 15 minutes")
    
    # Simulation heatmap
    x_coords = np.random.uniform(0, 100, 100)
    y_coords = np.random.uniform(0, 100, 100)
    
    fig = px.density_heatmap(x=x_coords, y=y_coords, 
                            title="Densit√© des Actions (58'-72')")
    fig.update_layout(height=300)
    
    st.plotly_chart(fig, use_container_width=True)

def show_scouting_analysis():
    """Interface de scouting et recrutement"""
    
    st.header("üîç Scouting & Recrutement")
    
    # Crit√®res de recherche
    st.subheader("üéØ Crit√®res de Recherche")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        position = st.selectbox("Position", ["Tous", "ST", "AM", "CM", "CB", "GK"])
    with col2:
        age_range = st.slider("√Çge", 16, 35, (20, 28))
    with col3:
        budget_max = st.number_input("Budget Max (M‚Ç¨)", 0, 200, 50)
    with col4:
        league = st.selectbox("Championnat", ["Tous", "Ligue 1", "Premier League", "La Liga"])
    
    # R√©sultats de recherche (simulation)
    st.subheader("üìã R√©sultats de Recherche")
    
    # Donn√©es simul√©es de joueurs
    scout_data = pd.DataFrame({
        'Joueur': ['Victor Osimhen', 'Jude Bellingham', 'Pedri Gonz√°lez', 'Aur√©lien Tchouam√©ni'],
        '√Çge': [25, 21, 22, 24],
        'Position': ['ST', 'CM', 'AM', 'DM'],
        '√âquipe': ['Napoli', 'Real Madrid', 'FC Barcelona', 'Real Madrid'],
        'Valeur (M‚Ç¨)': [120, 150, 80, 90],
        'Note Scout': [88, 92, 85, 87],
        'Goals/90': [0.71, 0.12, 0.08, 0.04],
        'xG/90': [0.68, 0.15, 0.12, 0.06],
        'Passes/90': [25.3, 68.2, 72.4, 58.7]
    })
    
    # Filtrage interactif
    filtered_data = scout_data.copy()
    
    if position != "Tous":
        filtered_data = filtered_data[filtered_data['Position'] == position]
    
    filtered_data = filtered_data[
        (filtered_data['√Çge'] >= age_range[0]) & 
        (filtered_data['√Çge'] <= age_range[1]) &
        (filtered_data['Valeur (M‚Ç¨)'] <= budget_max)
    ]
    
    st.dataframe(filtered_data, use_container_width=True)
    
    # Analyse comparative
    if len(filtered_data) > 1:
        st.subheader("üìä Comparaison des Candidats")
        
        # Graphique radar comparatif
        selected_players = st.multiselect(
            "S√©lectionner des joueurs √† comparer",
            filtered_data['Joueur'].tolist(),
            default=filtered_data['Joueur'].tolist()[:3]
        )
        
        if selected_players:
            fig = go.Figure()
            
            metrics = ['Note Scout', 'Goals/90', 'xG/90', 'Passes/90']
            
            for player in selected_players:
                player_data = filtered_data[filtered_data['Joueur'] == player].iloc[0]
                values = [
                    player_data['Note Scout'],
                    player_data['Goals/90'] * 50,  # Normalisation
                    player_data['xG/90'] * 50,
                    player_data['Passes/90']
                ]
                
                fig.add_trace(go.Scatterpolar(
                    r=values,
                    theta=metrics,
                    fill='toself',
                    name=player,
                    opacity=0.7
                ))
            
            fig.update_layout(
                polar=dict(radialaxis=dict(visible=True, range=[0, 100])),
                showlegend=True,
                title="Comparaison Multi-Crit√®res"
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    # Recommandations IA
    st.subheader("ü§ñ Recommandations IA")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="success-card">
            <h4>‚≠ê Top Recommandation</h4>
            <p><strong>Jude Bellingham</strong></p>
            <p>Compatibilit√©: 94%</p>
            <p>Profil: Milieu complet, jeune, grande marge de progression</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <h4>üí° Opportunit√© March√©</h4>
            <p><strong>Pedri Gonz√°lez</strong></p>
            <p>Valeur estim√©e: 20% sous-√©valu√©e</p>
            <p>Fen√™tre optimale: √ât√© 2024</p>
        </div>
        """, unsafe_allow_html=True)

def show_reports():
    """Interface de g√©n√©ration de rapports"""
    
    st.header("üìä G√©n√©ration de Rapports")
    
    # Types de rapports
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìã Rapports Disponibles")
        
        report_type = st.selectbox(
            "Type de rapport",
            ["Rapport Post-Match", "Analyse Mensuelle", "Bilan de Saison", 
             "Rapport de Scouting", "Analyse Blessures"]
        )
        
        date_range = st.date_input(
            "P√©riode d'analyse",
            value=[datetime.now() - timedelta(days=30), datetime.now()]
        )
        
        if st.button("üìÑ G√©n√©rer le Rapport"):
            st.success("‚úÖ Rapport g√©n√©r√© avec succ√®s !")
            
            # Simulation de contenu de rapport
            if report_type == "Rapport Post-Match":
                show_post_match_report()
            elif report_type == "Analyse Mensuelle":
                show_monthly_report()
    
    with col2:
        st.subheader("üìà Aper√ßu Rapide")
        
        # KPI de la p√©riode
        st.markdown("""
        **P√©riode :** Dernier mois
        
        **Points cl√©s :**
        - üü¢ Am√©lioration offensive (+15% xG)
        - üü° Stabilit√© d√©fensive 
        - üî¥ Baisse de forme de 3 joueurs cl√©s
        - ‚ö™ 2 nouvelles blessures √† surveiller
        """)
        
        # Graphique de synth√®se
        dates = pd.date_range('2024-10-01', periods=30, freq='D')
        performance_score = 70 + np.cumsum(np.random.normal(0, 2, 30))
        
        fig = px.line(x=dates, y=performance_score, 
                     title="Indice de Performance √âquipe")
        fig.add_hline(y=75, line_dash="dash", annotation_text="Objectif")
        st.plotly_chart(fig, use_container_width=True)

def show_post_match_report():
    """Affiche un rapport post-match d√©taill√©"""
    
    st.markdown("""
    ### üìä Rapport Post-Match D√©taill√©
    **PSG 2 - 1 OM | 15 Novembre 2024**
    
    #### üéØ R√©sum√© Ex√©cutif
    - Victoire m√©rit√©e avec domination territoriale
    - Performance offensive efficace (xG: 2.1 vs 1.2)
    - Pressing haute intensit√© r√©ussi (PPDA: 9.8)
    
    #### üìà Statistiques Cl√©s
    | M√©trique | PSG | OM |
    |----------|-----|-----|
    | Possession | 64% | 36% |
    | Tirs | 16 | 9 |
    | Tirs cadr√©s | 7 | 4 |
    | xG | 2.14 | 1.23 |
    | Passes r√©ussies | 521/587 (89%) | 298/376 (79%) |
    
    #### ‚≠ê Joueurs Performants
    1. **Mbapp√© (9.2/10)** - 1 but, 1 passe d√©cisive, 0.89 xG
    2. **Verratti (8.7/10)** - 94% passes r√©ussies, 3 passes cl√©s
    3. **Marquinhos (8.1/10)** - 6 r√©cup√©rations, 100% duels a√©riens
    
    #### üîß Points d'Am√©lioration
    - Efficacit√© d√©fensive sur coups de pied arr√™t√©s
    - Gestion du tempo en fin de match
    - Rotation plus fr√©quente du c√¥t√© droit
    """)

def show_monthly_report():
    """Affiche un rapport mensuel"""
    
    st.markdown("""
    ### üìÖ Analyse Mensuelle - Novembre 2024
    
    #### üìä Bilan du Mois
    - **Matchs jou√©s :** 6 (4V, 1N, 1D)
    - **Points r√©colt√©s :** 13/18 (72.2%)
    - **√âvolution classement :** 7√®me ‚Üí 5√®me (+2)
    
    #### üéØ Performance Offensive
    - Goals marqu√©s : 12 (moyenne 2.0/match)
    - xG g√©n√©r√© : 13.4 (efficacit√© 89.6%)
    - Meilleur buteur : Mbapp√© (5 goals)
    
    #### üõ°Ô∏è Performance D√©fensive  
    - Goals encaiss√©s : 7 (moyenne 1.17/match)
    - xGA conc√©d√© : 8.2 (surperformance +1.2)
    - Clean sheets : 2/6 matchs
    
    #### üë• √âtat de Forme Joueurs
    - **En progression :** Verratti, Hakimi, Ramos
    - **Forme stable :** Marquinhos, Donnarumma
    - **√Ä surveiller :** Neymar (baisse r√©gularit√©)
    """)

# Point d'entr√©e de l'application
if __name__ == "__main__":
    main()
